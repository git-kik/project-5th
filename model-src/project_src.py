# -*- coding: utf-8 -*-
"""project-src.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ds_1m89-oKnQNWRMNN-06PSF5__g5dKo
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Early diabetes diagnosis**"""

import os
import joblib
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

data_path = "/content/drive/MyDrive/project/diabetes_data_upload.csv"

actual_patient_data = pd.read_csv(data_path)
actual_patient_data.head()

actual_patient_data['class'].value_counts()

converted_data=pd.get_dummies(actual_patient_data, prefix=['Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss',
       'weakness', 'Polyphagia', 'Genital thrush', 'visual blurring',
       'Itching', 'Irritability', 'delayed healing', 'partial paresis',
       'muscle stiffness', 'Alopecia', 'Obesity', 'class'], drop_first=True)

X_train, X_test, y_train, y_test = train_test_split(converted_data.drop('class_Positive', axis=1),converted_data['class_Positive'], test_size=0.3, random_state=0)

classifier = RandomForestClassifier()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
from sklearn import metrics
acc = metrics.accuracy_score(y_test, y_pred)

print(f"Accuracy score is: {acc}")

os.makedirs('/content/drive/My Drive/project/models', exist_ok=True)

joblib.dump(classifier, os.path.join(folder_path, 'diabetes_early_stage.pkl'))

"""# **Liver disease predictions**"""

import pandas as pd
import joblib
from sklearn import ensemble, linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score,
    classification_report,
    f1_score,
    precision_score,
    recall_score,
)
import warnings
warnings.simplefilter("ignore")

patients = pd.read_csv("/content/drive/My Drive/data/indian_liver_patient.csv")
patients.head()

patients.Dataset.value_counts()

patients.Albumin_and_Globulin_Ratio.value_counts()

patients["Gender"] = patients["Gender"].apply(lambda x: 1 if x == "Male" else 0)
patients['Albumin_and_Globulin_Ratio'] = patients['Albumin_and_Globulin_Ratio'].fillna(1.00)

# TRAIN MODEL
X = patients.drop("Dataset", axis=1, inplace=False)
print(X.columns)
y = patients["Dataset"]
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("Shape training set: X:{}, y:{}".format(X_train.shape, y_train.shape))
print("Shape test set: X:{}, y:{}".format(X_test.shape, y_test.shape))

# model = ensemble.RandomForestClassifier()
model = linear_model.LogisticRegression()

model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Accuracy : {}".format(accuracy_score(y_test, y_pred)))
print("Recall : {}".format(recall_score(y_test, y_pred)))
print("Precision : {}".format(precision_score(y_test, y_pred)))
print("F1-Score : {}".format(f1_score(y_test, y_pred)))

clf_report = classification_report(y_test, y_pred)
print("Classification report")
print("---------------------")
print(clf_report)
print("_____________________")

joblib.dump(model, os.path.join(folder_path, 'liver.pkl'))